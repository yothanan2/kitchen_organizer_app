import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'auth_gate.dart'; // The main entry point that decides which screen to show
import 'firebase_options.dart'; // This file is generated by the FlutterFire CLI

// The main function is the starting point for the entire application.
// It needs to be `async` to wait for Firebase to initialize.
Future<void> main() async {
  // This is required to ensure that the Flutter binding is initialized
  // before any async operations like Firebase initialization are performed.
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase using the platform-specific options from firebase_options.dart
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // runApp starts the Flutter application.
  // We wrap the entire app in a `ProviderScope` so that all widgets can
  // access our Riverpod providers for state management.
  runApp(
    const ProviderScope(
      child: KitchenOrganizerApp(),
    ),
  );
}

class KitchenOrganizerApp extends StatelessWidget {
  const KitchenOrganizerApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Kitchen Organizer',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        visualDensity: VisualDensity.adaptivePlatformDensity,
        // Define a default theme for the app for consistency.
        appBarTheme: const AppBarTheme(
          centerTitle: true,
          elevation: 2,
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
            padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
          ),
        ),
      ),
      // The `home` is set to AuthGate, which will handle showing either the
      // login screen or the appropriate dashboard based on the user's auth state.
      home: const AuthGate(),
    );
  }
}
